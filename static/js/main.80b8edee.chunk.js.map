{"version":3,"sources":["hooks/use-input.js","components/UserInputs.js","App.js","reportWebVitals.js","index.js"],"names":["useInput","validateValue","useState","enteredValue","setEnteredValue","valueIsTouched","setValueIsTouched","enteredValueIsValid","value","hasError","isValid","valueChangeHandler","event","target","inputBlurHandler","reset","UserInputs","trim","enteredFirstName","firstNameHasError","firstNameIsValid","firstNameChangeHandler","firstNameBlurHandler","resetNameInput","includes","enteredEmail","emailHasError","emailIsValid","emailChangeHandler","emailBlurHandler","resetEmailInput","formIsValid","nameInputClasses","emailInputClasses","className","onSubmit","preventDefault","htmlFor","id","types","onChange","onBlur","disabled","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAiCeA,EA/BE,SAACC,GAEd,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAEMC,EAAsBN,EAAcE,GAgB1C,MAAM,CACFK,MAAML,EACNM,UAjBcF,GAAuBF,EAkBrCK,QAAQH,EACRI,mBAjBuB,SAACC,GACxBR,EAAgBQ,EAAMC,OAAOL,QAiB7BM,iBAdqB,WACrBR,GAAkB,IAclBS,MAXU,WACRX,EAAgB,IAChBE,EAAkB,O,OCsGbU,EAtHI,WAEjB,MASIhB,GAAS,SAAAQ,GAAK,OAAIA,EAAMS,UAPlBC,EAFV,EAEIV,MACSW,EAHb,EAGIV,SACQW,EAJZ,EAIIV,QACmBW,EALvB,EAKIV,mBACiBW,EANrB,EAMIR,iBACMS,EAPV,EAOIR,MAKJ,EASEf,GAAS,SAAAQ,GAAK,OAAIA,EAAMS,OAAOO,SAAS,QAPlCC,EAFR,EAEEjB,MACSkB,EAHX,EAGEjB,SACQkB,EAJV,EAIEjB,QACmBkB,EALrB,EAKEjB,mBACiBkB,EANnB,EAMEf,iBACMgB,EAPR,EAOEf,MAkBEgB,GAAa,EACdX,GAAoBO,IACrBI,GAAc,GAoBhB,IAcMC,EAAmBb,EAAsB,wBAAyB,gBAClEc,EAAoBP,EAAiB,wBAAyB,gBAEpE,OACE,uBAAMQ,UAAU,OAAOC,SAlBF,SAACvB,GACpBA,EAAMwB,iBAGHjB,GAAqBO,IAIxBH,IACAO,MASF,UAEI,4CAEI,sBAAKI,UAAWF,EAAhB,UACI,uBAAOK,QAAQ,YAAf,uBACA,uBACAC,GAAG,YACHC,MAAM,OACNC,SAAUnB,EACVb,MAAOU,EACPuB,OAAQnB,OAGXH,GAAqB,mBAAGe,UAAU,aAAb,0CAEtB,sBAAKA,UAAWD,EAAhB,UACI,uBAAOI,QAAQ,QAAf,mBACA,uBACAC,GAAG,QACHC,MAAM,OACNC,SAAUZ,EACVpB,MAAOiB,EACPgB,OAAQZ,OAGXH,GAAiB,mBAAGQ,UAAU,aAAb,gCAKlB,qBAAKA,UAAU,cAAf,SACI,wBAAQQ,UAAWX,EAAaY,KAAK,SAArC,0BCvGDC,MARf,WACE,OACE,qBAAKV,UAAU,WAAf,SACE,cAAC,EAAD,OCKSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.80b8edee.chunk.js","sourcesContent":["import {useState} from 'react';\r\n\r\nconst useInput = (validateValue) =>{\r\n\r\n    const [enteredValue, setEnteredValue] = useState(\"\");\r\n    const [valueIsTouched, setValueIsTouched] = useState(false);\r\n\r\n    const enteredValueIsValid = validateValue(enteredValue);\r\n    const hasError = !enteredValueIsValid && valueIsTouched;\r\n\r\n    const valueChangeHandler = (event) => {\r\n        setEnteredValue(event.target.value);\r\n      };\r\n    \r\n      const inputBlurHandler=()=>{\r\n        setValueIsTouched(true)\r\n      }\r\n\r\n      const reset=()=>{\r\n          setEnteredValue('');\r\n          setValueIsTouched('');\r\n      };\r\n\r\n    return{\r\n        value:enteredValue,\r\n        hasError,\r\n        isValid:enteredValueIsValid,\r\n        valueChangeHandler,\r\n        inputBlurHandler,\r\n        reset\r\n    };\r\n};\r\n\r\nexport default useInput;","import { useState } from \"react\";\r\nimport './UserInput.css';\r\nimport useInput from '../hooks/use-input';\r\n\r\nconst UserInputs = () => {\r\n\r\n  const {\r\n    \r\n      value:enteredFirstName,\r\n      hasError:firstNameHasError,\r\n      isValid:firstNameIsValid,\r\n      valueChangeHandler:firstNameChangeHandler,\r\n      inputBlurHandler:firstNameBlurHandler,\r\n      reset:resetNameInput\r\n  \r\n  } = useInput(value => value.trim());\r\n\r\n\r\n  const {\r\n    \r\n    value:enteredEmail,\r\n    hasError:emailHasError,\r\n    isValid:emailIsValid,\r\n    valueChangeHandler:emailChangeHandler,\r\n    inputBlurHandler:emailBlurHandler,\r\n    reset:resetEmailInput\r\n\r\n} = useInput(value => value.trim().includes(\"@\"));\r\n\r\n    \r\n    /* const [enteredFirstName, setEnteredFirstName] = useState(\"\");\r\n    const [firstNameTouched, setFirstNameTouched] = useState(false); */\r\n\r\n   /*  const [enteredEmail, setEnteredEmail] = useState(\"\");\r\n    const [emailTouched, setEmailTouched] = useState(false); */\r\n    \r\n    /* const enteredFirstNameIsValid = enteredFirstName.trim() !== '';\r\n    const firstNameInvalid = !enteredFirstNameIsValid && firstNameTouched */\r\n\r\n  /*   const enteredEmailIsValid = enteredEmail.trim()!== \"\" && enteredEmail.includes(\"@\");\r\n    const emailInvalid = !enteredEmailIsValid && emailTouched */\r\n\r\n\r\n  let formIsValid= false;\r\n  if(firstNameIsValid && emailIsValid){\r\n    formIsValid = true;\r\n  }\r\n\r\n\r\n  /* const firstNameChangeHandler = (event) => {\r\n    setEnteredFirstName(event.target.value);\r\n  }; */\r\n\r\n  /* const firstNameBlurHandler=()=>{\r\n    setFirstNameTouched(true);\r\n  }; */\r\n\r\n  /* const emailChangeHandler=(event)=>{\r\n    setEnteredEmail(event.target.value);\r\n  }; */\r\n  /* const emailInputBlurHandler=()=>{\r\n    setEmailTouched(true);\r\n  }; */\r\n\r\n  \r\n  const submitHandler =  (event) =>{\r\n      event.preventDefault();\r\n      \r\n\r\n      if(firstNameHasError && emailHasError){\r\n        return;\r\n      };\r\n      \r\n      resetNameInput();\r\n      resetEmailInput();\r\n    \r\n  };\r\n\r\n  \r\n  const nameInputClasses = firstNameHasError  ?  'new-userinput invalid': 'new-userinput'\r\n  const emailInputClasses = emailHasError ?  'new-userinput invalid': 'new-userinput'\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={submitHandler}>\r\n\r\n        <h1>Login Form</h1>\r\n\r\n            <div className={nameInputClasses}>\r\n                <label htmlFor=\"firstname\">FirstName</label>\r\n                <input\r\n                id=\"firstname\"\r\n                types=\"text\"\r\n                onChange={firstNameChangeHandler}\r\n                value={enteredFirstName}\r\n                onBlur={firstNameBlurHandler}\r\n                />\r\n            </div>\r\n            {firstNameHasError && <p className=\"error-text\">First Name must not be empty</p>}\r\n\r\n            <div className={emailInputClasses}>\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input\r\n                id=\"email\"\r\n                types=\"text\"\r\n                onChange={emailChangeHandler}\r\n                value={enteredEmail}\r\n                onBlur={emailBlurHandler}\r\n                />\r\n            </div>\r\n            {emailHasError && <p className=\"error-text\">Email is not valid</p>}\r\n\r\n\r\n         \r\n\r\n            <div className=\"form-action\">\r\n                <button disabled={!formIsValid} type=\"submit\">Submit</button>\r\n            </div>\r\n\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UserInputs;\r\n","import './App.css';\n\nimport UserInputs from './components/UserInputs';\n\nfunction App() {\n  return (\n    <div className='new-user'>\n      <UserInputs/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}